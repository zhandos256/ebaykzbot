import logging
import asyncio
import aiosqlite

from datetime import datetime
from contextlib import suppress

from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums.parse_mode import ParseMode
from aiogram.exceptions import TelegramBadRequest

from core.const import USERS_DB
from db.users_manager import get_all_users, update_user_subscription
from filters.AdminCheck import IsAdmin
from keyboards.inline.admin import users_paginator, UsersPaginate
from keyboards.inline.menu import admin_main_menu
from utils.notify import notify_user, notify_all_users

class A(StatesGroup):
    id = State()


router = Router()


@router.message(Command('update'))
async def date_updated(msg: types.Message):
    async with aiosqlite.connect(USERS_DB) as conn:
        async with conn.execute('SELECT userid FROM Users WHERE subscription = 1') as res:
            result = await res.fetchall()
            users = [user[0] for user in result]
            await notify_all_users(bot=msg.bot, users=users, text='–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.')
    await msg.answer(text='DONE')


@router.message(IsAdmin(), Command('acti'))
async def acti(msg: types.Message, state: FSMContext):
    await msg.answer(text='Get ID')
    await state.set_state(A.id)


@router.message(A.id, F.text.isdigit())
async def acti_st(msg: types.Message, state: FSMContext):
    async with aiosqlite.connect(USERS_DB) as conn:
        await conn.execute("UPDATE Users SET subscription = ? WHERE userid = ?", (1, int(msg.text)))
        await conn.commit()
    today = datetime.now()
    now = today.now()
    template_text_for_user = [
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
        f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ',
        f'–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {now}',
        '–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, –∫–æ–º–∞–Ω–¥–∞ EBAY_KZ_BOT ‚≠êÔ∏è'
    ]
    try:
        await msg.bot.send_message(chat_id=int(msg.text), text='\n'.join(template_text_for_user))
    except Exception as e:
        logging.exception(e)
    await msg.answer('DONE !')
    await state.clear()


@router.message(IsAdmin(), Command('send_promo'))
async def send_users_message_without_sub(msg: types.Message):
    template = [
    'üî• –ö–µ—Ä–µ–º–µ—Ç –º“Ø–º–∫—ñ–Ω–¥—ñ–∫! üî•',
    '–¢–µ–∫ <b>–±“Ø–≥—ñ–Ω —Å–æ“£“ì—ã –∫“Ø–Ω</b>! –®–µ–∫—Å—ñ–∑ –∂–∞–∑—ã–ª—ã–º –±–∞—Ä –±–æ–ª“ì–∞–Ω—ã <b>2000 —Ç–≥</b>, –±“±—Ä—ã–Ω“ì—ã <s>15000 —Ç–≥</s> –æ—Ä–Ω—ã–Ω–∞! üéâ',
    '–ú“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ø –∞–ª–º–∞“£—ã–∑ –∂”ô–Ω–µ –±–∞—Ä–ª—ã“õ –∞—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä“ì–∞ –∏–µ –±–æ–ª—ã“£—ã–∑! üåü',
    '‚è∞ –ñ–µ“£—ñ–ª–¥—ñ–∫ –∞—è“õ—Ç–∞–ª—É—ã–Ω–∞ 6 —Å–∞“ì–∞—Ç “õ–∞–ª–¥—ã! “ö–∞–ø—ã “õ–∞–ª–º–∞“£—ã–∑! ‚è∞\n',
    '- - - - - - - - -\n',
    'üî• –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π! üî•',
    '–¢–æ–ª—å–∫–æ <b>—Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å</b>! –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ–≥–æ –∑–∞ <b>2000 —Ç–≥</b> –≤–º–µ—Å—Ç–æ <s>15000 —Ç–≥</s>! üéâ',
    '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞! üåü',
    '‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 6 —á–∞—Å–æ–≤ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏! –ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! ‚è∞',
    ]
    async with aiosqlite.connect(USERS_DB) as conn:
        u = []
        async with conn.execute("SELECT userid FROM Users WHERE subscription = 0") as result:
            res = await result.fetchall()
            for j in res:
                u.append(j[0])
        for user in u:
            try:
                with suppress(TelegramBadRequest):
                    await msg.bot.send_message(
                        chat_id=user,
                        # chat_id=727014481,
                        text='\n'.join(template),
                        parse_mode=ParseMode.HTML
                    )
                    await asyncio.sleep(.05)
            except Exception:
                continue


@router.message(IsAdmin(), Command('admin'))
async def admin_panel(msg: types.Message):
    tempate = [
        'Administrator super panel ‚öôÔ∏è',
    ]
    await msg.answer(
        text='\n'.join(tempate),
        reply_markup=admin_main_menu()
    )


@router.callback_query(IsAdmin(), F.data == 'admin_menu_callback')
async def admin_menu_cb_handler(cb: types.CallbackQuery):
    tempate = [
        '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öôÔ∏è',
    ]
    await cb.message.edit_text(
        text='\n'.join(tempate),
        reply_markup=admin_main_menu()
    )


@router.callback_query(IsAdmin(), F.data == 'show_users_callback')
async def show_users(cb: types.CallbackQuery):
    users = await get_all_users()

    content = [
        f'<b>ID</b>: {users[0][0]}',
        f'<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>: {users[0][1]}',
        f'<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {users[0][2]}',
        f'<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {users[0][3]}',
        f'<b>–ò–º—è</b>: {users[0][4]}',
        f'<b>–§–∞–º–∏–ª–∏—è</b>: {users[0][5]}',
        f'<b>–Ø–∑—ã–∫</b>: {users[0][6]}',
        f'<b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: {"üëçüèª" if users[0][7] else "üëéüèø"}',
    ]

    with suppress(TelegramBadRequest):
        await cb.message.edit_text(
            text='\n'.join(content),
            reply_markup=users_paginator(page=0, max_page=len(users)),
            parse_mode=ParseMode.HTML
        )
    await cb.answer()


@router.callback_query(IsAdmin(), UsersPaginate.filter(F.action.in_(['prev', 'next', 'activate', 'deactivate', 'ban_user'])))
async def show_users_paginate_handler(cb: types.CallbackQuery, callback_data: UsersPaginate):
    users = await get_all_users()
    page_num = int(callback_data.page)
    page = page_num
    today = datetime.now()
    now = today.now()

    if callback_data.action == 'prev':
        page = page_num - 1 if page_num > 0 else (len(users) - 1)
    elif callback_data.action == 'next':
        page = page_num + 1 if page_num < (len(users) - 1) else 0
    elif callback_data.action == 'activate':
        if users[page][7] == 1:
            await cb.answer(text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[page][3]} {users[page][4]} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚ùï')
        else:
            template_text_for_user = [
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
                f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ',
                f'–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {now}',
                '–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, –∫–æ–º–∞–Ω–¥–∞ EBAY_KZ_BOT ‚≠êÔ∏è'
            ]
            await update_user_subscription(value=1, userid=users[page][2]) # activate users subscription
            await cb.answer(text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[page][3]} {users[page][4]} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ')
            await notify_user(bot=cb.bot, chat_id=users[page][2], text='\n'.join(template_text_for_user)) # notify user
    elif callback_data.action == 'deactivate':
        if users[page][7] == 0:
            await cb.answer(text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[page][3]} {users[page][4]} —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ùï')
        else:
            template_text_for_user = [
                '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–æ–º ‚ùå',
                f'–î–∞—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {now}',
                '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º @EBAY_KZ_BOT_SUPPORT',
            ]
            await update_user_subscription(value=0, userid=users[page][2]) # deactivate users subscription
            await cb.answer(text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[page][3]} {users[page][4]} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ùå')
            await notify_user(bot=cb.bot, chat_id=users[page][2], text='\n'.join(template_text_for_user)) # notify user
    
    users = await get_all_users()
    
    content = [
        f'<b>ID</b>: {users[page][0]}',
        f'<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>: {users[page][1]}',
        f'<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {users[page][2]}',
        f'<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {users[page][3]}',
        f'<b>–ò–º—è</b>: {users[page][4]}',
        f'<b>–§–∞–º–∏–ª–∏—è</b>: {users[page][5]}',
        f'<b>–Ø–∑—ã–∫</b>: {users[page][6]}',
        f'<b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: {"üëçüèª" if users[page][7] else "üëéüèø"}',
    ]

    with suppress(TelegramBadRequest):
        await cb.message.edit_text(
            text='\n'.join(content),
            reply_markup=users_paginator(page=page, max_page=len(users)),
            parse_mode=ParseMode.HTML
        )
    await cb.answer()